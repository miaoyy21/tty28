// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pc28.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/proto.SearchService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SearchService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pc28.proto",
}

// GoldServiceClient is the client API for GoldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoldServiceClient interface {
	Gold(ctx context.Context, in *GoldRequest, opts ...grpc.CallOption) (*GoldResponse, error)
}

type goldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoldServiceClient(cc grpc.ClientConnInterface) GoldServiceClient {
	return &goldServiceClient{cc}
}

func (c *goldServiceClient) Gold(ctx context.Context, in *GoldRequest, opts ...grpc.CallOption) (*GoldResponse, error) {
	out := new(GoldResponse)
	err := c.cc.Invoke(ctx, "/proto.GoldService/Gold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoldServiceServer is the server API for GoldService service.
// All implementations must embed UnimplementedGoldServiceServer
// for forward compatibility
type GoldServiceServer interface {
	Gold(context.Context, *GoldRequest) (*GoldResponse, error)
	mustEmbedUnimplementedGoldServiceServer()
}

// UnimplementedGoldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoldServiceServer struct {
}

func (UnimplementedGoldServiceServer) Gold(context.Context, *GoldRequest) (*GoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gold not implemented")
}
func (UnimplementedGoldServiceServer) mustEmbedUnimplementedGoldServiceServer() {}

// UnsafeGoldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoldServiceServer will
// result in compilation errors.
type UnsafeGoldServiceServer interface {
	mustEmbedUnimplementedGoldServiceServer()
}

func RegisterGoldServiceServer(s grpc.ServiceRegistrar, srv GoldServiceServer) {
	s.RegisterService(&GoldService_ServiceDesc, srv)
}

func _GoldService_Gold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoldServiceServer).Gold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoldService/Gold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoldServiceServer).Gold(ctx, req.(*GoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoldService_ServiceDesc is the grpc.ServiceDesc for GoldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoldService",
	HandlerType: (*GoldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gold",
			Handler:    _GoldService_Gold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pc28.proto",
}

// BettingServiceClient is the client API for BettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BettingServiceClient interface {
	Betting(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error)
}

type bettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBettingServiceClient(cc grpc.ClientConnInterface) BettingServiceClient {
	return &bettingServiceClient{cc}
}

func (c *bettingServiceClient) Betting(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error) {
	out := new(BettingResponse)
	err := c.cc.Invoke(ctx, "/proto.BettingService/Betting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BettingServiceServer is the server API for BettingService service.
// All implementations must embed UnimplementedBettingServiceServer
// for forward compatibility
type BettingServiceServer interface {
	Betting(context.Context, *BettingRequest) (*BettingResponse, error)
	mustEmbedUnimplementedBettingServiceServer()
}

// UnimplementedBettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBettingServiceServer struct {
}

func (UnimplementedBettingServiceServer) Betting(context.Context, *BettingRequest) (*BettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Betting not implemented")
}
func (UnimplementedBettingServiceServer) mustEmbedUnimplementedBettingServiceServer() {}

// UnsafeBettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BettingServiceServer will
// result in compilation errors.
type UnsafeBettingServiceServer interface {
	mustEmbedUnimplementedBettingServiceServer()
}

func RegisterBettingServiceServer(s grpc.ServiceRegistrar, srv BettingServiceServer) {
	s.RegisterService(&BettingService_ServiceDesc, srv)
}

func _BettingService_Betting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BettingServiceServer).Betting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BettingService/Betting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BettingServiceServer).Betting(ctx, req.(*BettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BettingService_ServiceDesc is the grpc.ServiceDesc for BettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BettingService",
	HandlerType: (*BettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Betting",
			Handler:    _BettingService_Betting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pc28.proto",
}
